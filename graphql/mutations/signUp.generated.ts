// THIS FILE IS AUTO-GENERATED BY GRAPHQL CODE GENERATOR!
import * as Types from '../../types';

import { gql } from '@apollo/client';
import * as Apollo from '@apollo/client';
const defaultOptions =  {}
export type UserSignupMutationVariables = Types.Exact<{
  userData: Types.SignUpInput;
}>;


export type UserSignupMutation = (
  { __typename?: 'Mutation' }
  & { signUp?: Types.Maybe<(
    { __typename?: 'SignUpPayload' }
    & { viewer: (
      { __typename?: 'Viewer' }
      & Pick<Types.Viewer, 'sessionToken'>
      & { user: (
        { __typename?: 'User' }
        & Pick<Types.User, 'email'>
      ) }
    ) }
  )> }
);


export const UserSignupDocument = gql`
    mutation userSignup($userData: SignUpInput!) {
  signUp(input: $userData) {
    viewer {
      sessionToken
      user {
        email
      }
    }
  }
}
    `;
export type UserSignupMutationFn = Apollo.MutationFunction<UserSignupMutation, UserSignupMutationVariables>;

/**
 * __useUserSignupMutation__
 *
 * To run a mutation, you first call `useUserSignupMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUserSignupMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [userSignupMutation, { data, loading, error }] = useUserSignupMutation({
 *   variables: {
 *      userData: // value for 'userData'
 *   },
 * });
 */
export function useUserSignupMutation(baseOptions?: Apollo.MutationHookOptions<UserSignupMutation, UserSignupMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<UserSignupMutation, UserSignupMutationVariables>(UserSignupDocument, options);
      }
export type UserSignupMutationHookResult = ReturnType<typeof useUserSignupMutation>;
export type UserSignupMutationResult = Apollo.MutationResult<UserSignupMutation>;
export type UserSignupMutationOptions = Apollo.BaseMutationOptions<UserSignupMutation, UserSignupMutationVariables>;