// THIS FILE IS AUTO-GENERATED BY GRAPHQL CODE GENERATOR!
import * as Types from '../../types';

import { gql } from '@apollo/client';
import * as Apollo from '@apollo/client';
const defaultOptions =  {}
export type UserLoginMutationVariables = Types.Exact<{
  userData: Types.LogInInput;
}>;


export type UserLoginMutation = (
  { __typename?: 'Mutation' }
  & { logIn?: Types.Maybe<(
    { __typename?: 'LogInPayload' }
    & Pick<Types.LogInPayload, 'clientMutationId'>
    & { viewer: (
      { __typename?: 'Viewer' }
      & Pick<Types.Viewer, 'sessionToken'>
      & { user: (
        { __typename?: 'User' }
        & Pick<Types.User, 'email'>
      ) }
    ) }
  )> }
);


export const UserLoginDocument = gql`
    mutation userLogin($userData: LogInInput!) {
  logIn(input: $userData) {
    clientMutationId
    viewer {
      sessionToken
      user {
        email
      }
    }
  }
}
    `;
export type UserLoginMutationFn = Apollo.MutationFunction<UserLoginMutation, UserLoginMutationVariables>;

/**
 * __useUserLoginMutation__
 *
 * To run a mutation, you first call `useUserLoginMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUserLoginMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [userLoginMutation, { data, loading, error }] = useUserLoginMutation({
 *   variables: {
 *      userData: // value for 'userData'
 *   },
 * });
 */
export function useUserLoginMutation(baseOptions?: Apollo.MutationHookOptions<UserLoginMutation, UserLoginMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<UserLoginMutation, UserLoginMutationVariables>(UserLoginDocument, options);
      }
export type UserLoginMutationHookResult = ReturnType<typeof useUserLoginMutation>;
export type UserLoginMutationResult = Apollo.MutationResult<UserLoginMutation>;
export type UserLoginMutationOptions = Apollo.BaseMutationOptions<UserLoginMutation, UserLoginMutationVariables>;